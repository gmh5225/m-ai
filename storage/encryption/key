<?php

class BCAHash
{
    const ENCRYPTION_METHOD = 'AES-128-CBC';
    protected $hashKey = '';
    public function __construct($hashKey)
    {
        $this->hashKey = $hashKey;
    }

    public function encrypt($content)
    {
        $content = serialize($content);
        $content = $this->bcrypt($content);
        $content = $this->combineReverseHash($content);
        $content = $this->combineReverseHash($content);
        $content = $this->encryptIt($content);
        return $content;
    }

    public function decrypt($content)
    {
        $content = $this->decryptIt($content);
        $content = $this->uncombinedReverseHash($content);
        $content = $this->uncombinedReverseHash($content);
        $content = $this->umbcrypt($content);
        try {
            if ($this->isSerialized($content)) {
                $content = unserialize($content);
            } else {
                $content = '';
            }
        } catch (\Throwable $th) {
            $content = '';
        }
        return $content;
    }


    function encryptIt($data)
    {
        $key = $this->hashKey;
        $plaintext = $data;
        $ivlen = openssl_cipher_iv_length($cipher = self::ENCRYPTION_METHOD);
        $iv = openssl_random_pseudo_bytes($ivlen);
        $ciphertext_raw = openssl_encrypt($plaintext, $cipher, $key, $options = OPENSSL_RAW_DATA, $iv);
        $hmac = hash_hmac('sha256', $ciphertext_raw, $key, $as_binary = true);
        $ciphertext = base64_encode($iv . $hmac . $ciphertext_raw);
        return $ciphertext;
    }

    function decryptIt($data)
    {
        $key = $this->hashKey;
        $c = base64_decode($data);
        $ivlen = openssl_cipher_iv_length($cipher = self::ENCRYPTION_METHOD);
        $iv = substr($c, 0, $ivlen);
        $hmac = substr($c, $ivlen, $sha2len = 32);
        $ciphertext_raw = substr($c, $ivlen + $sha2len);
        $original_plaintext = openssl_decrypt($ciphertext_raw, $cipher, $key, $options = OPENSSL_RAW_DATA, $iv);
        $calcmac = hash_hmac('sha256', $ciphertext_raw, $key, $as_binary = true);
        if (hash_equals($hmac, $calcmac)) {
            return $original_plaintext;
        }
    }

    public function bcrypt($string)
    {
        $str1 = base64_encode($string);
        $str1 = $this->combineReverse($str1);
        $str1 = '$' . strrev(
            base64_encode(
                '$' . $this->hashKey . strrev($str1) . strrev($this->hashKey)
            )
        );
        return $str1;
    }
    public function umbcrypt($string)
    {
        $a = base64_decode(strrev(substr($string, 1)));
        $a = substr($a, strlen($this->hashKey) + 1);
        $string = substr(strrev($a), strlen($this->hashKey));
        $string = $this->uncombinedReverse($string);
        return base64_decode($string);
    }


    public function combine($content)
    {

        $l = strlen($content);
        $a = $l / 2;
        $strOneLen = ((int) $a) + $l % 2;
        $strTwoLen = (int) $a;
        $strOne = substr($content, 0, $strOneLen);
        $strTwo = substr($content, $strOneLen);
        $newText = '';
        for ($i = 0; $i < $strOneLen; $i++) {
            $newText .= substr($strOne, $i, 1) . ($i < $strTwoLen ? substr($strTwo, $i, 1) : '');
        }
        return $newText;
    }
    public function uncombined($content)
    {
        $strOne = '';
        $strTwo = '';
        $newText = '';
        $l = strlen($content);
        for ($i = 0; $i < $l; $i++) {
            if ($i % 2) $strTwo .= substr($content, $i, 1);
            else $strOne .= substr($content, $i, 1);
        }
        $newText = $strOne . $strTwo;
        return $newText;
    }
    public function combineReverse($content)
    {

        $l = strlen($content);
        $a = $l / 2;
        $strOneLen = ((int) $a) + $l % 2;
        $strTwoLen = (int) $a;
        $strOne = strrev(substr($content, 0, $strOneLen));
        $strTwo = substr($content, $strOneLen);
        $newText = '';
        for ($i = 0; $i < $strOneLen; $i++) {
            $newText .= substr($strOne, $i, 1) . ($i < $strTwoLen ? substr($strTwo, $i, 1) : '');
        }
        return $newText;
    }

    public function uncombinedReverse($content)
    {
        $strOne = '';
        $strTwo = '';
        $newText = '';
        $l = strlen($content);
        for ($i = 0; $i < $l; $i++) {
            if ($i % 2) $strTwo .= substr($content, $i, 1);
            else $strOne .= substr($content, $i, 1);
        }
        $newText = strrev($strOne) . $strTwo;
        return $newText;
    }
    public function combineReverseHash($content)
    {

        $l = strlen($content);
        $a = $l / 2;
        $strOneLen = ((int) $a) + $l % 2;
        $strTwoLen = (int) $a;
        $strOne = substr(md5(uniqid()), 0, 16) . strrev(substr($content, 0, $strOneLen)) . $this->hashKey;
        $strTwo = $this->hashKey . substr($content, $strOneLen) . substr(md5(uniqid()), 0, 16);
        $newText = '';
        $strOneLen = strlen($strOne);
        $strTwoLen = strlen($strTwo);
        for ($i = 0; $i < $strOneLen; $i++) {
            $newText .= substr($strOne, $i, 1) . ($i < $strTwoLen ? substr($strTwo, $i, 1) : '');
        }
        $newText = base64_encode($newText);
        return $newText;
    }

    public function uncombinedReverseHash($content)
    {
        $content = base64_decode($content);
        $strOne = '';
        $strTwo = '';
        $newText = '';
        $l = strlen($content);
        for ($i = 0; $i < $l; $i++) {
            if ($i % 2) $strTwo .= substr($content, $i, 1);
            else $strOne .= substr($content, $i, 1);
        }
        $a = substr($strTwo, strlen($this->hashKey));
        $b = substr(strrev($strOne), strlen($this->hashKey));
        $newText = substr($b, 0, strlen($b) - 16) . substr($a, 0, strlen($a) - 16);
        return $newText;
    }

    function isSerialized($data, $strict = true)
    {
        // If it isn't a string, it isn't serialized.
        if (!is_string($data)) {
            return false;
        }
        $data = trim($data);
        if ('N;' === $data) {
            return true;
        }
        if (strlen($data) < 4) {
            return false;
        }
        if (':' !== $data[1]) {
            return false;
        }
        if ($strict) {
            $lastc = substr($data, -1);
            if (';' !== $lastc && '}' !== $lastc) {
                return false;
            }
        } else {
            $semicolon = strpos($data, ';');
            $brace     = strpos($data, '}');
            // Either ; or } must exist.
            if (false === $semicolon && false === $brace) {
                return false;
            }
            // But neither must be in the first X characters.
            if (false !== $semicolon && $semicolon < 3) {
                return false;
            }
            if (false !== $brace && $brace < 4) {
                return false;
            }
        }
        $token = $data[0];
        switch ($token) {
            case 's':
                if ($strict) {
                    if ('"' !== substr($data, -2, 1)) {
                        return false;
                    }
                } elseif (false === strpos($data, '"')) {
                    return false;
                }
                // Or else fall through.
            case 'a':
            case 'O':
                return (bool) preg_match("/^{$token}:[0-9]+:/s", $data);
            case 'b':
            case 'i':
            case 'd':
                $end = $strict ? '$' : '';
                return (bool) preg_match("/^{$token}:[0-9.E+-]+;$end/", $data);
        }
        return false;
    }
}

